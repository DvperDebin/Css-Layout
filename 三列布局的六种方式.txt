 三列布局的六种方式

1. 第一种：最右自适应 （最简单的一种）
	左中两个列是固定宽度列并且浮动，最右是自适应宽度列。 因为左中列的浮动，所以已经脱离文档流，文档流中的右自适应列被左中两列挡住，所以只需要向右平移调整好位置即可 （参考三列布局-1）

2. 第二种：中区自适应，左中区左浮动，右区不浮动
	首先左中区左浮动导致中区宽度必须是100% 否则不会自适应。左中区浮动，容器空间不足，中区只能向左平移回到容器。 回到容器后，覆盖住了左区的内容，左区设置相对定位，利用定位优先级高的关系再显示出来，此时左区因为优先级高右覆盖了中区，中区设置padding来让内容移动，又因为设置padding不想让整体盒子变大所以还要设置一个怪异盒子模型。右区不浮动所以在文档流中，利用绝对定位来显示到页面并且到达最右侧，因为需要右区相对于容器来移动，所以再给容器一个相对定位。 （参考三列布局-2）


3. 第三种 - 中区自适应，左区左浮动，右区右浮动，中区不浮动不定位。（不建议使用）
	解决这个问题最简单的办法就是：让左区代码和右区代码在html相邻。 因为如果是 左区 - 中区 - 右区 这种代码格式，右区浮动而中区不浮动，那么右区不论怎么浮动都无法超过中区的空间。但是以 左区 - 右区 - 中区 的格式，对于右区来说兄级div就是左区了，可以浮动达到效果。同时由于浮动，左右区覆盖了中区的左右的位置，所以只要对中区设置一个margin即可，因为中区依然在文档流中。（参考三列布局-3）

4. 第四种 中区自适应 - 左中区左浮动，右区右浮动
	左中区左浮动因为空间问题中区被挤出，使用margin回到容器覆盖了左区，左区利用定位的优先级高再次显示出来。左区此时覆盖了中区一部分，中区利用border-box 和 padding-left 来解决这个问题。现在右区还在容器外面因为没有右区的空间，所以我们利用margin再让右区回到容器中。此时又覆盖了中区的右部空间，所以中区还要设置一个padding-right.（参考三列布局-4）

5. 中区自适应 -全体左浮动，中区在html结构最上方 （相对下面的那种方法来说不推荐）
	全体左浮动，因为中区在html结构最上方，所以页面被中区全部占领，左区和右区在下一行并排排列。此时最简单的办法就是定位，利用定位来解决。给左区和右区设置绝对定位，同时给容器设置相对定位。 左区设置left：0 右区设置right: 0; 此时效果可以完成但是左右都覆盖了中区的位置，利用border-box和padding来解决这个问题。（参考三列布局-5）

6. 中区自适应 -全体左浮动，中区在html结构最上方（推荐！）
	全体左浮动，左区向左移动父元素的宽度，即margin-left: 100%; 回到容器最左边。 右区只需要移动自身的宽度单位就可以回到容器的最右边。 此时左区右区都覆盖了中区的一部分。 换个思路与，此时这三个区其实都是容器的内容，所以我们可以设置容器的左右内边距来给左右设置一些空间。设置的空间大小为左右区的大小，此时我们只需要让左右区利用相对定位移动到刚刚设置出来的空空间就好了。（参考三列布局-6）
